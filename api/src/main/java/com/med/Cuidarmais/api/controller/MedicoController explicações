@RestController
@RequestMapping("/medicos")
public class MedicoController {

    /*pegaremos o repositoty e mandaremos percistir no banco de dados.

      precisamos da classe da interface repository.

      e por isso declaramos como sendo um atributo da classe controller.

      Com isso faremos com que ao insves de nos instanciarmos esta classe
      o proprio spring ira instanciar para gente.

      Isso se chama INJEÇÃO DE DEPENDÊNCIAS
     */

    @Autowired // feito isso ele ira saber que é ele que ira instanciar e passar este atributo repository dentro da nossa classe controller
    private MedicoRepository repository;

    @PostMapping
    @Transactional/*@Transactional é uma anotação em Java usada para marcar métodos ou classes,
                    indicando que as operações dentro delas são transacionais, ou seja, elas serão executadas como uma única unidade de trabalho
                     que é confirmada (commit) ou revertida (rollback) automaticamente se ocorrer algum erro.
                     Isso é comumente usado em acesso a bancos de dados para garantir a consistência dos dados.*/
    public void cadastrar(@RequestBody @Valid DadosCadastroMed dados){

        repository.save(new Medico(dados));
    } /*
    Essa linha está salvando uma nova instância de Medico no repositório (em um banco de dados)
     usando o método save do objeto repository. ou seja, sempre que tiver um novo medico passara aqui para salvar.
     A instância de Medico é criada com base nos dados fornecidos no parâmetro dados
      e passada diretamente para o repositório para ser persistida.
      Isso é uma operação comum ao usar frameworks de persistência de dados, como o Spring Data JPA,
      para armazenar informações em um banco de dados.
    */


List antigo:
<--------------------------------------------------------------------------------------------------------------->
    @GetMapping
    public List<Medico> listar(){ /* diferente do metodo cadastrar o retorno deste não pode ser void, pois,
    estamos estamos querendo que este metodo devolva uma lista quando o cliente pedir*/

        return repository.findAll(); //pedindo para retornar o banco de dados

        /*
            findAll ja é um metodo pre definido da jpa então apos repository chamamos este metodo
            para retornar o banco de dados

            OBS:  de acordo com o nosso manual, o metodo listar
            ira devolver apenas: Nome, E-mail, CRM e Especialidade
            então implementaremos isso
        */

    }
<--------------------------------------------------------------------------------------------------------------->


List novo:
<--------------------------------------------------------------------------------------------------------------->
    @GetMapping
    public List<DadosListagemMedico> listar(){ /* diferente do metodo cadastrar o retorno deste não pode ser void, pois,
                                               estamos querendo que este metodo devolva uma lista quando o cliente pedir*/

    return repository.findAll().stream().map(DadosListagemMedico::new).toList(); //pedindo para retornar o banco de dados
          //stream().map(DadosListagemMedico::new) mapeia o contrutor de DadosListagemMedico
          //.toList converte em uma lista
          //com isso convertemos uma Lista de Medico para DadosListagemMedico

    }
<----------------------------------------------------------------------------------------------------------------->


como queremos ordenar a listagem de cima para baixo em ordem alfabética e tambem
ter um limite de 10 medicos por pagina, iremos implementar esta funcionalidade

Page novo:
<--------------------------------------------------------------------------------------------------------------->
    @GetMapping
    public Page<DadosListagemMedico> listar(Pageable paginacao){//Pageable interface do proprio spring

        return repository.findAll(paginacao).map(DadosListagemMedico::new);

        /*
        * Pageble:
          Pageble é uma interface do proprio spring que faz a paginação

          No repository existe uma sobre-carga do metodo findAll que recebe o
          Pageble como parametro, e com isso o spring automaticamente
          ira montrar uma Query com esse esquema de paginação

          Page:
          Page é para devolver as informações da nossa paginação.
          Alem de devolver a lista contendo os dados dos medicos,
          ele vai devolver tambem os dados da paginação

          Nosso generics de Page ainda sera DadosListagemMedico

        * */

    }
<--------------------------------------------------------------------------------------------------------------->

não precisamos mais do stream(), pois o findAll(paginacao) ele devolve um Page e o Page ja tem o metodo map diretamente, e tambem, não precisamos mais do toList(),
pois, quando chamamos o metodo ele ja faz a conversão e devolve um Page do DTO automaticamente






DIA 25/10/2023
<------------------------------------------------------------------------------------------------------------------------------------------------------------------->
ATENÇÃO:

novas alterações:

1.Atualizando dados do medico:

para alterar a informaçoes do medico, dentro da regra de negocio pederos atualizar apenas:
nome, telefone e endereço.

então criamos um DTO record com o nome DadosAtualizacaoMed

e colocamos como parametro o Long Id com uma anotação @NotNull pois é obrigatorio e não é uma String,
o nome, o telefone e o endereco todos do tipo String

apos isso fizemos um contrutor dentro da classe medicos:

    public void atualizarInformacoes(DadosAtualizacaoMed dados) {// atualiza informações
        if(dados.nome() != null){ //se o dados nome não tiver null podera atualizar
        this.nome = dados.nome();
        }

        if (dados.telefone() != null){
            this.telefone = dados.telefone();
        }

        if (dados.endereco() != null){
            this.endereco.atualizarInformacoes(dados.endereco());
        }

    }

onde se não for null sera atualizado os dados

usamos este mesmo conceito na Classe Endereco no package endereco pois estamos usando
todos os Atributos de Endereco dentro do Medico:

  public void atualizarInformacoes(DadosEndereco dados) {
        if (dados.logradouro() != null){
            this.logradouro = dados.logradouro();
        }

        if (dados.bairro() != null){
            this.bairro = dados.bairro();
        }

        if (dados.cep() != null){
            this.cep = dados.cep();
        }

        if (dados.numero() != null){
            this.numero = dados.numero();
        }

        if (dados.complemento() != null){
            this.complemento = dados.complemento();
        }

        if (dados.cidade() != null){
            this.cidade = dados.cidade();
        }

        if (dados.uf() != null){
            this.uf = dados.uf();
        }
    }

    apos isso conseguiremos implementar o metodo atualizar dentro do controller:

        @PutMapping
        @Transactional
        public void atualizar(@RequestBody @Valid DadosAtualizacaoMed dados){

            var medico = repository.getReferenceById(dados.id()); // método getReferenceById é usado para buscar pelo Id
            medico.atualizarInformacoes(dados);

        }

        como pode ver criamos uma variavel medico que recebe repository e por sua vez ira puxar dados (Id) dentro do nosso
        banco, apos isso medico ira efetuar o metodo atualizarInformacoes(dados) que recebera como parametro dados para a atualização
        do banco de dados

        por se tratar de uma atualização usamos o @PutMapping
        e por ter leitura de dados usamos o @Transactional




2.inativando medico:

alteramos o metodo de listagem com o findAllByAtivoTrue que funcionara como boolean
e criamos um metodo excluir

neste metodo excluir ao inves de excluirmos o medico diretamente no banco de dados e perder suas informaçoes com este codigo aqui:


@DeleteMapping("/{id}")
@Transactional
public void excluir(@PathVariable Long id){
  repository.deleteById(id);
}

simplesmente implementamos na nossa api as seguintes coisas:

1.Criamos um metodo dentro de medico que ira dizer que o ativo sera falso ao chamar ele:

    public void excluir() { // coloca o atributo ativo igual a false
        this.ativo = false;
    }

2.Criamos um novo findAll dentro do MedicoRepository para que o medico inativo não apareça na lista:

public interface MedicoRepository extends JpaRepository<Medico, Long> {
    Page<Medico> findAllByAtivoTrue(Pageable paginacao);
}

3. e dentro do metodo de listagem caso o metodo ativado esteja false colocamos o findAllByAtivoTrue que criamos para que o medico
cadastrado não apareça mais nas listas:

    @GetMapping
    public Page<DadosListagemMedico> listar(@PageableDefault(size = 10, sort = {"nome"}) Pageable paginacao){//Pageable interface do proprio spring
        return repository.findAllByAtivoTrue(paginacao).map(DadosListagemMedico::new);

    }

4.criamos uma nova coluna no banco de dados chamado Ativo:

alter table medicos add ativo tinyint;
update medicos set ativo = 1;

todo ativo que estiver 1 significa que na coluna ele esta ativo, se tiver zero sera descrito que estara inativo.
<------------------------------------------------------------------------------------------------------------------------------------------------------------------->







